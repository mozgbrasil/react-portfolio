{"version":3,"sources":["customApp/containers/Tarot/index.js"],"names":["console","log","Error","stack","cards_ptBR","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","concat","elements","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","arguments","_useState","useState","Set","gone","Object","_home_marcio_dados_git_projects_react_portfolio_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__","cards_length","length","_useSprings","useSprings","_home_marcio_dados_git_projects_react_portfolio_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","distance","xDir","direction","velocity","trigger","dir","argumentss","alert","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","_ref2","react_spring_hooks__WEBPACK_IMPORTED_MODULE_8__","div","key","id","style","transform","interpolate","assign","backgroundImage","_default","context","_this","_home_marcio_dados_git_projects_react_portfolio_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_marcio_dados_git_projects_react_portfolio_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_marcio_dados_git_projects_react_portfolio_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","elCanvas","Component"],"mappings":"yQAKAA,QAAQC,IAAI,cAAc,IAAIC,OAAQC,OAWtC,IAAMC,EAAa,CACjB,2EACA,wEACA,0EACA,yEACA,oFACA,qFAIIC,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,GAALF,EAASG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAC/EQ,EAAO,SAAAR,GAAC,MAAK,CAAEI,IAAK,EAAGD,MAAO,IAAKD,GAAI,MAEvCO,EAAQ,SAACC,EAAGC,GAAJ,oDAAAC,OAAwDF,EAAI,GAA5D,iBAAAE,OAA8EF,EAA9E,eAAAE,OAA6FD,EAA7F,MAkEd,IAMME,EACJC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cARa,kBAAMF,EAAAC,EAAAC,cAAA,WACrBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,SAOE,MACAH,EAAAC,EAAAC,cAzEJ,WACEtB,QAAQC,IAAI,OAAQuB,WADN,IAAAC,EAGCC,mBAAS,kBAAM,IAAIC,MAA3BC,EAHOC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,MAKVM,EAAe3B,EAAW4B,OALhBC,EAMOC,YAAWH,EAAc,SAAAzB,GAAC,OAAAuB,OAAAM,EAAA,EAAAN,CAAA,GAAUxB,EAAGC,GAAb,CAAiBQ,KAAMA,EAAKR,OAN7D8B,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMPI,EANOD,EAAA,GAMAE,EANAF,EAAA,GAQRG,EAAOC,YAAW,SAAAC,GAAqF,IAA3EC,EAA2Eb,OAAAC,EAAA,EAAAD,CAAAY,EAAlFE,KAAkF,MAAnEC,EAAmEH,EAAnEG,KAAcC,EAAqDhB,OAAAC,EAAA,EAAAD,CAAAY,EAA7DK,MAA6D,MAA5CC,EAA4CN,EAA5CM,SAAsBC,EAAsBnB,OAAAC,EAAA,EAAAD,CAAAY,EAAlCQ,UAAkC,MAAfC,EAAeT,EAAfS,SAEtFC,EAAUD,EAAW,GAErBE,EAAMJ,EAAO,GAAK,EAAI,EAEtBK,EAAa,CAAEX,QAAOE,OAAMC,SAAQE,WAAUC,OAAME,WAAUE,MAAKD,WACzEnD,QAAQC,IAAI,uBAAwBoD,GAC/BT,GAAkB,IAATI,GACZM,MAAM,MAGHV,GAAQO,GAASvB,EAAK2B,IAAIb,GAE/BJ,EAAI,SAAAhC,GAEF,GAAIoC,IAAUpC,EAAd,CACA,IAAMkD,EAAS5B,EAAK6B,IAAIf,GAOxB,MAAO,CAAEnC,EALCiD,GAAU,IAAME,OAAOC,YAAcP,EAAMR,EAAOC,EAAS,EAKzDnC,IAHAmC,EAAS,KAAOW,EAAe,GAANJ,EAAWF,EAAW,GAG1CzC,MADHmC,EAAO,IAAM,EACH/B,WAAO+C,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAASnB,EAAO,IAAMY,EAAS,IAAM,SAGpGZ,GAAQhB,EAAKoC,OAASjC,GAAckC,WAAW,kBAAMrC,EAAKsC,SAAW5B,EAAI,SAAAhC,GAAC,OAAID,EAAGC,MAAK,OAmB7F,OAAO+B,EAAM8B,IAAI,SAAAC,EAAuB9D,GAAvB,IAAGC,EAAH6D,EAAG7D,EAAGC,EAAN4D,EAAM5D,EAAGE,EAAT0D,EAAS1D,IAAKD,EAAd2D,EAAc3D,MAAd,OACfW,EAAAC,EAAAC,cAAC+C,EAAA,EAASC,IAAV,CAAcC,IAAKjE,EAAGkE,GAAG,WAAWC,MAAO,CAAEC,UAAWC,YAAY,CAACpE,EAAGC,GAAI,SAACD,EAAGC,GAAJ,qBAAAU,OAAyBX,EAAzB,OAAAW,OAAgCV,EAAhC,aAE1EY,EAAAC,EAAAC,cAAC+C,EAAA,EAASC,IAAVzC,OAAA+C,OAAA,GAAkBrC,EAAKjC,GAAvB,CAA2BkE,GAAG,WAAWC,MAAO,CAAEC,UAAWC,YAAY,CAACjE,EAAKD,GAAQM,GAAQ8D,gBAAe,OAAA3D,OAASd,EAAWE,GAApB,aAgBhH,qBAKF,SAAAwE,EAAYzC,EAAO0C,GAAS,IAAAC,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAAJ,IAC1BE,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAAiD,GAAAO,KAAAH,KAAM7C,EAAO0C,KAERO,SAAW,KAHUN,mKAa1B,OACE7D,SAfuBoE","file":"static/js/28.b63b3527.chunk.js","sourcesContent":["import React, { Component, useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring/hooks'\nimport { useGesture } from 'react-with-gesture'\nimport \"./style.css\";\n\nconsole.log('DEBUG_File', new Error().stack);\n\n/*const cards_enUs = [\n  'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\n]*/\n\nconst cards_ptBR = [\n  'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/9/92/Jean_Dodal_Tarot_trump_02.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/e/e0/Jean_Dodal_Tarot_trump_01.jpg'\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -10, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Deck() {\n  console.log('Deck', arguments);\n  // The set flags all the cards that are flicked out\n  const [gone] = useState(() => new Set())\n  // Create a bunch of springs that contain x/y-position, rotation and scale - using the helpers above\n  var cards_length = cards_ptBR.length;\n  const [props, set] = useSprings(cards_length, i => ({ ...to(i), from: from(i) }))\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    // If you flick hard enough it should trigger the card to fly out\n    const trigger = velocity > 0.2\n    // Direction should either point left or right\n    const dir = xDir < 0 ? -1 : 1\n    //\n    const argumentss = { index, down, xDelta, distance, xDir, velocity, dir, trigger };\n    console.log('useGesture_Arguments', argumentss);\n    if (!down && (xDir === 0) ){\n      alert('s');\n    }\n    // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    if (!down && trigger) gone.add(index)\n    // useSprings.set reconfigures the springs\n    set(i => {\n      // We're only interested in changing spring-data for the current spring\n      if (index !== i) return\n      const isGone = gone.has(index)\n      // When a card is gone it flys out left or right, otherwise it's either dragged to delta, or goes back to zero\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0\n      // How much the card tilts, flicking it harder makes it rotate faster\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0)\n      // Active cards lift up a bit\n      const scale = down ? 1.1 : 1\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    // When all cards are removed, make a reset\n    if (!down && gone.size === cards_length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  //\n  /*var count = 0;\n  setInterval(function(){\n    console.log('setInterval', cards_ptBR);\n    cards_ptBR.sort(() => Math.random() - 0.5);\n    console.log('setInterval', cards_ptBR);\n    if(count == cards_length){\n      count = 0;\n    }\n    count++;\n    //gone.add(count);\n    //gone.has(count);\n    //setTimeout(() => set(i => to(i)), 600);\n    const argumentss = { count, gone, cards_length};\n    console.log('setInterval_Arguments', argumentss);\n  },2000);*/\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} id=\"taro-uno\" style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} id=\"taro-duo\" style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards_ptBR[i]})` }} />\n    </animated.div>\n  ))\n}\n\n//export default Deck;\n\nconst Sidebarr = () => <div>\n  <div className=\"App\">\n    Ola\n  </div>\n</div>;\n\nconst elements = (\n  <div>\n    <Sidebarr />\n    <Deck />\n  </div>\n);\n\nexport default class extends Component {\n  constructor(props, context) {\n    super(props, context);\n    //console.warn('constructor');\n    this.elCanvas = null;\n  }\n  componentWillMount() {\n    //console.warn('componentWillMount');\n  }\n  componentDidMount() {\n    //console.warn('componentDidMount');\n    //Deck();\n  }\n  render() {\n    return (\n      elements\n    );\n  }\n}\n"],"sourceRoot":""}